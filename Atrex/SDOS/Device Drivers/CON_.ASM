VIDEO	EQU	29h
KEYB	EQU	16h

KOD	SEGMENT
	ASSUME	CS:KOD, DS:KOD

;Device header
DD	-1
DW	8013h
DW	OFFSET	STRAT
DW	OFFSET	IRPT
DB	"&CON   *"

;Command table
CMD_TABLE	LABEL	WORD
	DW	OFFSET	INIT
	DW	OFFSET	MEDIA_CHECK
	DW	OFFSET	BLD_BPB
	DW	OFFSET	INPUT_IOCTL
	DW	OFFSET	INPUT
	DW	OFFSET	INPUT_NOWAIT
	DW	OFFSET	INPUT_STATUS
	DW	OFFSET	INPUT_FLUSH
	DW	OFFSET	OUTPUT
	DW	OFFSET	OUTPUT_VERIFY
	DW	OFFSET	OUTPUT_STATUS
	DW	OFFSET	OUTPUT_FLUSH
MAX_CMD	EQU ($-CMD_TABLE)/2-1

;ü¡d¡c¡ program
HLP_ADR	LABEL	DWORD
 HLP_OFF	DW	0
 HLP_SEG	DW	0

STRAT	PROC	FAR
	MOV	CS:HLP_OFF,BX
	MOV	CS:HLP_SEG,ES
	RET
STRAT	ENDP

;Prov dØc¡ program
IRPT	PROC	FAR
	PUSH	SI
	PUSH	AX
	PUSH	CX
	PUSH	DX
	PUSH	DI
	PUSH	BP
	PUSH	DS
	PUSH	ES
	PUSH	BX
	LDS	BX,CS:HLP_ADR
	MOV	CX,[BX+12h]
	MOV	AL,[BX+2]
	CBW
	MOV	SI,OFFSET CMD_TABLE
	ADD	SI,AX
	ADD	SI,AX
	CMP	AL,MAX_CMD
	JA	ERRCOM
	LES	DI,[BX+0Eh]
	PUSH	CS
	POP	DS
	JMP	[SI]
IRPT_DONE:
	MOV	AH,3h
	JMP	SHORT	IRPT_EXIT
INPUT_IOCTL:
ERRCOM:
	MOV	AL,3h
	MOV	AH,81h
	JMP	SHORT	IRPT_EXIT
MEDIA_CHECK:
BLD_BPB:
INPUT_STATUS:
OUTPUT_STATUS:
OUTPUT_FLUSH:
IRPT_END:
	MOV	AH,1h
IRPT_EXIT:
	LDS	BX,CS:HLP_ADR
	MOV	[BX+3],AX
	POP	BX
	POP	ES
	POP	DS
	POP	BP
	POP	DI
	POP	DX
	POP	CX
	POP	AX
	POP	SI
	RET
IRPT	ENDP

INT1BH:
	MOV	BYTE PTR CS:CHAR,03h
	IRET
CHAR	DB	0

INPUT	LABEL	NEAR
	JCXZ	INP_EXIT
INP1:
	CALL	INP_CHAR
	STOSB
	LOOP	INP1
INP_EXIT:
	JMP	IRPT_EXIT

	ASSUME	DS:KOD
INP_CHAR	PROC	NEAR
	XOR	AX,AX
	XCHG	AL,CHAR
	OR	AL,AL
	JNZ	A2
	INT	KEYB
	OR	AX,AX
	JZ	INP_CHAR
A1:
	OR	AL,AL
	JNZ	A2
	MOV	CHAR,AH
A2:
	RET
INP_CHAR	ENDP

	ASSUME	DS:KOD
INPUT_NOWAIT:
	MOV	AL,CHAR
	OR	AL,AL
	JZ	B1
	JMP	B3
B1:
	MOV	AH,01
	INT	KEYB
	JNZ	B2
	JMP	IRPT_DONE
B2:
	OR	AX,AX
	JNZ	B3
	MOV	AH,0h
	INT	KEYB
	JMP	INPUT_NOWAIT
B3:
	LDS	BX,HLP_ADR
	MOV	[BX+0Dh],AL
	JMP	IRPT_END

INPUT_FLUSH:
	MOV	CHAR,0
C1:
	MOV	AH,01
	INT	KEYB
	JZ	C2
	MOV	AH,0
	INT	KEYB
	JMP	C1
C2:
	JMP	IRPT_END

OUTPUT:
OUTPUT_VERIFY:
	JCXZ	D1
COUT:
	MOV	AL,ES:[DI]
	INC	DI
	INT	VIDEO
	LOOP	COUT
D1:
	JMP	IRPT_END

	ASSUME	ES:NOTHING,DS:NOTHING
INIT:
	MOV	DX,OFFSET Messege
	CALL	WriteString
	XOR	BX,BX
	MOV	DS,BX
	MOV	BX,6Ch
	MOV	WORD PTR [BX],OFFSET	INT1BH
	MOV	[BX+2],CS
	LDS	BX,HLP_ADR
	MOV	WORD PTR [BX+0Eh],OFFSET	INIT
	MOV	[BX+10h],CS
	MOV	CX,0FFFFh
	CALL	_Wait
	MOV	DX,OFFSET Message_
	CALL	WriteString
;	CALL	ReadEnter
	JMP	IRPT_END

WriteString	PROC	NEAR
	push cs
	pop  ds
	mov  ah,9
	int  21h
	RET
WriteString	ENDP

Messege:
	db '&CON   *'
	db 'Instaluji ovladac.$'
Message_:
	db '..hotovo$',10,13

_Wait	PROC	NEAR
Wa_:
;	PUSH	CX
;	MOV	CX,0FFh
;Wa__:
	NOP
	NOP
	PUSH	AX
	POP	AX
	NOP
	NOP
	NOP
	NOP
;	LOOP	Wa__
;	POP	CX
	LOOP	Wa_
	RET
_Wait	ENDP

ReadEnter PROC NEAR
@1:
  mov ah,00
  int 16h
  cmp al,13
  jz  @2
  jmp @1
@2:
  RET
ReadEnter ENDP

KOD	ENDS
	END
